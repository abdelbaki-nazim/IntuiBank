datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  SUPERADMIN
  ADMIN
  USER
}

enum RecordStatus {
  ACTIVE
  DELETED
  ARCHIVED
  SUSPENDED
}

enum CardStatus {
  ACTIVE
  INACTIVE
  BLOCKED
  EXPIRED
  LOST
  STOLEN
  PENDING
}

enum CreditStatus {
  PENDING
  INITIATED
  APPROVED
  REJECTED
  CANCELED
}

enum CreditState {
  ACTIVE
  PAID_OFF
  DEFAULTED
  CANCELLED
  SUSPENDED
}

enum DeliveryMethod {
  ENVOI
  REMISE
}

enum CreationOrRenewal {
  CREATION
  RENOUVELLEMENT
}

enum Civility {
  MR  
  MRS 
  MS
  MISS 
  DR 
  PROF 
  MAITRE 
}

enum ClientType {
  PHYSICAL
  MORAL
}

enum ActivityType {
  INDIVIDUAL
  PROFESSIONAL
}

enum DocumentType {
  CNIBE
  PASSEPORT
  PERMIS_CONDUIRE
  CARTE_ELECTEUR
  CARTE_CONSULAIRE
}

enum AuthorizationType {
  AGREMENT
  PATENTE
  LICENCE
  CARTE_ARTISAN
  AUTRE
}

model User {
  id   String @id @default(uuid())
  role Role   @default(USER)

  email               String    @unique
  emailVerified       Boolean?
  image               String?
  name                String?
  passwordHash        String?
  failedLoginAttempts Int       @default(0)
  lastFailedAttemptAt DateTime?
  lastLoginAt         DateTime?
  isBlocked           Boolean   @default(false)
  blockedUntil        DateTime?

  isTwoFactorEnabled Boolean @default(false)
  twoFactorSecret    String?

  auditLogs AuditLog[]
  sessions  Session[]

  @@index([id])
  @@index([role])
}

model Client {
  id   String     @id @default(uuid())
  type ClientType @default(PHYSICAL)

  status RecordStatus @default(ACTIVE)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  accounts          Account[]
  personPhysical    PersonPhysical?
  personMoral       PersonMoral?
  identityDocuments IdentityDocument[]

  @@index([id])
}

model PersonPhysical {
  id                     String        @id @default(cuid())
  civility               Civility?
  activityType           ActivityType?
  firstName              String?
  middleName             String?
  lastName               String?
  maidenName             String?
  birthDate              DateTime
  birthPlace             String
  gender                 String
  presumed               Boolean       @default(false)
  birtCertificateNumber  String?
  countryOfBirth         String
  nationalityOrigin      String
  nationalityAcquisition String?
  maritalStatus          String
  spouseLastName         String?
  spouseFirstName        String?
  motherMaidenName       String?
  motherFirstName        String
  fatherFirstName        String
  personalAddress        String
  postalCode             String
  city                   String
  stateDepartment        String
  country                String
  landlinePhone          String?
  personalMobilePhone    String
  personalFax            String?
  personalEmail          String        @unique

  client   Client @relation(fields: [clientId], references: [id])
  clientId String @unique

  activities Activity[]
}

model PersonMoral {
  id                              String   @id @default(cuid())
  firstName                       String?
  middleName                      String?
  lastName                        String?
  maidenName                      String?
  companyName                     String
  denomination                    String?
  legalForm                       String
  businessActivity                String
  capital                         String
  workforce                       Int?
  headquartersAddress             String
  postalCode                      String
  city                            String
  stateDepartment                 String
  taxIdentificationNumber         String?
  statisticalIdentificationNumber String?
  businessCreationDate            DateTime
  annualRevenue                   Float?
  professionalPhone               String
  professionalMobile              String?
  professionalFax                 String?
  professionalEmail               String   @unique

  client   Client @relation(fields: [clientId], references: [id])
  clientId String @unique
}

model Activity {
  id               String         @id @default(cuid())
  personPhysicalId String
  client           PersonPhysical @relation(fields: [personPhysicalId], references: [id])

  // Fields for individuals
  profession    String?
  employer      String?
  monthlyIncome Float?

  // Fields for professionals/commercial
  businessFullName                String?
  businessDenomination            String?
  legalForm                       String?
  businessActivity                String?
  capital                         Float?
  workforce                       Int?
  headquartersAddress             String?
  businessPostalCode              String?
  cityOfBusiness                  String?
  stateDepartment                 String?
  taxIdentificationNumber         String?
  statisticalIdentificationNumber String?
  businessCreationDate            DateTime?
  annualRevenue                   Float?

  professionalPhone  String?
  professionalMobile String?
  professionalFax    String?
  professionalEmail  String?

  @@index([personPhysicalId])
}

model IdentityDocument {
  id       String @id @default(cuid())
  clientId String
  client   Client @relation(fields: [clientId], references: [id])

  documentType             DocumentType @default(CNIBE)
  otherDocumentType        String?
  documentNumber           String
  issueDate                DateTime
  issuedBy                 String
  otherIssuingEntity       String?
  nationalIdentifierNumber String?

  // Fields specific to traders or professionals
  otherAuthorization              String?
  tradeRegisterNumber             String?
  artisanCardNumber               String?
  professionalDocumentDate        DateTime?
  professionalDocumentIssuedBy    String?
  otherProfessionalDocumentIssuer String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientId])
}

model Account {
  id                   String         @id @default(cuid())
  client               Client         @relation(fields: [clientId], references: [id])
  clientId             String
  accountNumber        String         @unique 
  accountDescription   String?
  accountPurpose       AccountPurpose @relation(fields: [accountPurposeId], references: [id])
  accountPurposeId     String
  otherAccountPurposes String?
  openedAt             DateTime?
  chapter              String?
  currency             Currency       @relation(fields: [currencyId], references: [id])
  currencyId           String
  currentBalance       Float          @default(0)

  status    RecordStatus @default(ACTIVE)
  deletedAt DateTime?

  kycDetails   String?
  kycValidated Boolean @default(false)
  observation  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creditApplications CreditApplication[]
  magneticCards      MagneticCard?
  cheques            Cheque?

  @@index([clientId])
}

model AccountPurpose {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  accounts    Account[]
}

model MagneticCard {
  id                String            @id @default(cuid())
  account           Account           @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  accountId         String            @unique
  cardNumber        String            @unique
  cardHolderName    String?
  cvv               String?
  status            CardStatus        @default(PENDING)
  civility          Civility?
  requestDate       DateTime? //Le client fait la demande
  issuedAt          DateTime? //La banque génère la carte
  deliveryDate      DateTime? //La carte est envoyée/remise au client
  receptionDate     DateTime? //Le client la reçoit
  expirationDate    DateTime? //La carte devient invalide
  address           String?
  wilaya            String?
  commune           String?
  postalCode        String?
  deliveryMethod    DeliveryMethod    @default(ENVOI)
  creationOrRenewal CreationOrRenewal @default(CREATION)

  pinCodeReceived      String?
  pinCodeReceptionDate DateTime?
  pinCodeDeliveryDate  DateTime?
  otpCodeReceived      String?
  otpCodeReceptionDate DateTime?
  otpCodeDeliveryDate  DateTime?

  observation String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cardTypeId String
  cardType   CardType @relation(fields: [cardTypeId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@index([accountId])
}

model CardType {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  magneticCards MagneticCard[]
}

model Cheque {
  id             String    @id @default(cuid())
  account        Account   @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  accountId      String    @unique
  chequeNumber   String    @unique
  requestDate    DateTime //Le client fait la demande
  issuedAt       DateTime? //La banque génère le chèque
  deliveryDate   DateTime? //le chèque est envoyée/remis au client
  receptionDate  DateTime? //Le client le reçoit
  expirationDate DateTime? //le chèque devient invalide

  observation String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([accountId])
}

model CreditApplication {
  id                     String       @id @default(cuid())
  creditTypeId           String
  creditType             CreditType   @relation(fields: [creditTypeId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  creditTypeAbbrev       String?
  creditCode             String?
  activity               String?
  sector                 String?
  activityBranch         String?
  specificZone           String?
  clientStatus           String?
  projectCost            Float?
  solicitedAmount        Float?
  receptionDate          DateTime?
  realEstateToFinance    String?
  realEstateValue        Float?
  promoter               String?
  monthlyIncome          Float?
  guaranteeIncome        Float?
  theoreticalInstallment Float?
  apport                 Float?
  pnr                    String?
  status                 CreditStatus @default(PENDING)

  account  Account @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  clientId String

  credits Credit?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Credit {
  id                  String            @id @default(cuid())
  status              CreditState       @default(ACTIVE)
  creditApplication   CreditApplication @relation(fields: [CreditApplicationId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  CreditApplicationId String            @unique
  creditNumber        String            @unique
  creditTypeId        String
  creditType          CreditType        @relation(fields: [creditTypeId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  // General Credit Information
  principalAmount Float? 
  interestRate    Float? 
  termInMonths    Int?

  // Credit Timeline
  startDate          DateTime? 
  endDate            DateTime? 
  monthlyInstallment Float?

  // Details
  approvedAmount      Float?
  transmissionDate    DateTime? 
  accordRecu          Boolean? 
  accordDate          DateTime? 
  deferredMonths      Int? 
  bonification        Float?
  amountInLetter      String?
  secondaryRC         String? 
  rcDate              DateTime?
  accountNumber       String? 
  clientIdentifier    String?
  authorizationNumber String? 
  authorizationDate   DateTime? 
  decisionDate        DateTime? 
  scheduledDueDate    DateTime?
  authorizedAmount    Float? 
  mobilisedAmount     Float? 
  disbursementDate    DateTime? 
  numberOfEffects     Int? 
  firstDueDate        DateTime? 
  lastDueDate         DateTime?
  initialDossier      String? 
  dossierNumber       String?
  amendment           String? 

  observation String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  amortizationEntries AmortizationEntry[]
  guarantees          Guarantee[]
  legalAction         CreditLegalAction[]
  financings          Financing[]

  @@index([CreditApplicationId])
}

model CreditType {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  credits           Credit[]
  creditApplication CreditApplication[]
}

model AmortizationEntry {
  id                String   @id @default(cuid())
  credit            Credit   @relation(fields: [creditId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creditId          String
  installmentNumber Int 
  dueDate           DateTime 

  principalPortion Float? 
  interestPortion  Float? 

  scheduledPayment Float? 
  amountPaid       Float? 
  carryOverPayment Float? 

  remainingBalance Float?
  paid             Boolean @default(false)

  history AmortizationEntryHistory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([creditId])
  @@index([dueDate])
}

model AmortizationEntryHistory {
  id                       String            @id @default(cuid())
  entry                    AmortizationEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)
  entryId                  String
  previousAmountPaid       Float?
  newAmountPaid            Float?
  previousRemainingBalance Float?
  newRemainingBalance      Float?
  differential             Float? 
  changedBy                String?
  changeDate               DateTime          @default(now())
}

model Guarantee {
  id              String         @id @default(cuid())
  credit          Credit         @relation(fields: [creditId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creditId        String
  guaranteeTypeId String?
  guaranteeType   GuaranteeType? @relation(fields: [guaranteeTypeId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  description String?
  value       Float?
  metadata    Json?
  expiryDate  DateTime?

  observation String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([creditId])
  @@index([guaranteeTypeId])
}

model GuaranteeType {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  guarantees Guarantee[]
}

model Financing {
  id       String @id @default(cuid())
  creditId String
  credit   Credit @relation(fields: [creditId], references: [id], onDelete: Cascade)
  type     String
  value    Float
  order    Int

  observation String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CreditLegalAction {
  id            String  @id @default(cuid())
  creditId      String
  credit        Credit  @relation(fields: [creditId], references: [id], onDelete: Cascade)
  unpaidClaim   Float? 
  invitation    String?
  miseEnDemeure String?
  lastWarning   String?
  sommation     String?
  pvCarence     String?

  observation String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Currency {
  id        String    @id @default(cuid())
  code      String    @unique 
  name      String
  symbol    String?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  accounts  Account[]
}

model AuditLog {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  actionType       String 
  affectedEntity   String 
  affectedEntityId String?
  ipAddress        String?
  userAgent        String?
  loggedAt         DateTime @default(now())

  @@index([userId])
  @@index([loggedAt])
}

model LoginLog {
  id            String   @id @default(cuid())
  email         String
  ipAddress     String?
  userAgent     String?
  device        String?
  os            String?
  browser       String?
  browserVer    String?
  locale        String? 
  country       String?
  region        String?
  city          String?
  loggedAt      DateTime @default(now())
  isSuccess     Boolean
  failureReason String?

  @@index([loggedAt])
  @@index([ipAddress])
  @@index([email])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  expires      DateTime
  createdAt    DateTime @default(now())

  @@index([userId])
  @@index([expires])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
